/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    struct info
    {
        int num;
        int sum;
    };
    info helper(TreeNode* root, int& ans)
    {
        if(root == NULL)
            return {0,0};
        if(root->left == NULL && root->right == NULL)
        {
            ans++;
            return {1,root->val};
        }
        auto left = helper(root->left,ans);
        auto right = helper(root->right, ans);
        if((left.sum + right.sum + root->val) / (left.num + right.num + 1) == root->val)
            ans++;
        return {left.num + right.num + 1, left.sum + right.sum + root->val};
    }
    int averageOfSubtree(TreeNode* root) {
      int ans = 0;
      helper(root,ans);
      return ans;  
    }
};


Time Complexity: O(N)
Space Complexity: O(1)
